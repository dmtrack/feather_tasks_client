{"version":3,"file":"static/js/622.67edab6f.chunk.js","mappings":"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","sources":["components/Input/Input.style.tsx","components/Input/Input.tsx","components/AuthForm/AuthForm.tsx","components/PopupNotification/PopupNotification.style.tsx","components/PopupNotification/PopupNotification.tsx","hooks/useRedux.ts","redux/api/userApiSlice.ts","hooks/useSignInUser.ts","pages/SignInPage/SignInPage.tsx","redux/api/authApiSlice.ts","redux/selectors/userSelectors.ts","ts/enums.ts","utils/functions.ts"],"sourcesContent":["import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    width: 100%;\n`;\n\nconst InputWrapper = styled.div`\n    position: relative;\n    display: flex;\n    align-items: center;\n`;\n\nconst StyledInput = styled.input`\n    width: 100%;\n    padding: 10px;\n    outline: none;\n    border: 1px solid;\n    border-radius: 3px;\n    border-color: ${({ theme }) => theme.colors.grey};\n    font-family: ${({ theme }) => theme.fonts.text};\n    font-weight: 400;\n    font-size: ${({ theme }) => theme.fontSizes.text};\n    transition: ${({ theme }) => theme.effects.transition};\n\n    &:focus {\n        border-color: ${({ theme }) => theme.colors.primaryColor};\n        box-shadow: 0px 10px 13px rgba(0, 0, 0, 0.07);\n    }\n\n    &:focus ~ label,\n    &:valid ~ label,\n    &:disabled ~ label {\n        transform: translateX(-10px) translateY(-32px);\n        font-size: ${({ theme }) => theme.fontSizes.smallText};\n        color: ${({ theme }) => theme.colors.text};\n    }\n`;\n\nconst PasswordButton = styled.button.attrs({\n    type: 'button',\n})`\n    position: absolute;\n    border: none;\n    outline: none;\n    background-color: ${({ theme }) => theme.colors.transparent};\n    width: 30px;\n    right: 6px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: ${({ theme }) => theme.effects.transition};\n\n    &:hover {\n        opacity: ${({ theme }) => theme.effects.hoverOpacity};\n    }\n\n    svg {\n        width: 100%;\n        height: 100%;\n        color: ${({ theme }) => theme.colors.grey};\n    }\n`;\n\nconst Label = styled.label`\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    padding: 10px;\n    display: inline-block;\n    color: ${({ theme }) => theme.colors.grey};\n    font-size: ${({ theme }) => theme.fontSizes.text};\n    transition: ${({ theme }) => theme.effects.transition};\n    pointer-events: none;\n`;\n\nconst InputErrorText = styled.span`\n    font-size: ${({ theme }) => theme.fontSizes.smallNoteText};\n    color: ${({ theme }) => theme.colors.red};\n    display: flex;\n    width: 100%;\n    justify-content: flex-end;\n    text-align: end;\n    min-height: 16px;\n`;\n\nexport {\n    Wrapper,\n    InputWrapper,\n    StyledInput,\n    PasswordButton,\n    Label,\n    InputErrorText,\n};\n","import React, { useState } from 'react';\n\nimport {\n    FieldError,\n    FieldValues,\n    Path,\n    UseFormClearErrors,\n    UseFormRegister,\n    ValidationRule,\n} from 'react-hook-form';\n\nimport { AiOutlineEye, AiOutlineEyeInvisible } from 'react-icons/ai';\n\nimport {\n    InputWrapper,\n    Label,\n    StyledInput,\n    InputErrorText,\n    Wrapper,\n    PasswordButton,\n} from './Input.style';\n\ninterface InputProps<T extends FieldValues> {\n    type: string;\n    placeholderText?: string;\n    name: Path<T>;\n    minLength?: ValidationRule<number>;\n    maxLength?: ValidationRule<number>;\n    required?: string;\n    pattern?: ValidationRule<RegExp>;\n    errors?: FieldError;\n    disabled?: boolean;\n    register: UseFormRegister<T>;\n    clearErrors: UseFormClearErrors<T>;\n}\n\nfunction Input<T extends FieldValues>({\n    type,\n    placeholderText,\n    name,\n    minLength,\n    maxLength,\n    required,\n    pattern,\n    errors,\n    disabled,\n    register,\n    clearErrors,\n}: InputProps<T>) {\n    const [isPasswordShown, setPasswordShown] = useState(false);\n\n    const renderPasswordButton = () => {\n        if (name !== 'password') {\n            return null;\n        }\n\n        return (\n            <PasswordButton onClick={() => setPasswordShown((prev) => !prev)}>\n                {isPasswordShown ? <AiOutlineEyeInvisible /> : <AiOutlineEye />}\n            </PasswordButton>\n        );\n    };\n\n    const togglePasswordInputType = () => {\n        if (name !== 'password') {\n            return type;\n        }\n\n        return isPasswordShown ? 'text' : 'password';\n    };\n\n    return (\n        <Wrapper>\n            <InputWrapper>\n                <StyledInput\n                    type={togglePasswordInputType()}\n                    required\n                    id={name}\n                    disabled={disabled}\n                    {...register(name, {\n                        required,\n                        minLength,\n                        maxLength,\n                        pattern,\n                        onChange: () => errors && clearErrors(name),\n                    })}\n                />\n                <Label>{placeholderText}</Label>\n                {renderPasswordButton()}\n            </InputWrapper>\n            <InputErrorText>{errors?.message}</InputErrorText>\n        </Wrapper>\n    );\n}\n\nInput.defaultProps = {\n    placeholderText: '',\n    errors: undefined,\n    disabled: false,\n    maxLength: undefined,\n    minLength: undefined,\n    required: undefined,\n    pattern: undefined,\n};\n\nexport default Input;\n","import React, { memo, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { SubmitHandler, useForm } from 'react-hook-form';\n\nimport { useAppSelector } from 'hooks/useRedux';\n\nimport { getUser } from 'redux/selectors/userSelectors';\n\nimport Button from 'components/Button/Button';\nimport Input from 'components/Input/Input';\n\nimport {\n    defaultUserFormValues,\n    formTextFields,\n    nameValidation,\n} from 'utils/constants';\n\nimport { UserFormValues } from 'ts/interfaces';\n\nimport { Form } from 'styles/styles';\n\ninterface AuthFormProps {\n    keyPrefix: string;\n    onSubmit: SubmitHandler<UserFormValues>;\n    isLoadingAuth: boolean;\n}\n\nfunction AuthForm({ keyPrefix, isLoadingAuth, onSubmit }: AuthFormProps) {\n    const location = useLocation();\n    const user = useAppSelector(getUser);\n    const {\n        register,\n        handleSubmit,\n        clearErrors,\n        formState: { errors },\n        trigger,\n    } = useForm<UserFormValues>({\n        mode: 'onSubmit',\n        reValidateMode: 'onSubmit',\n        defaultValues: user ?? defaultUserFormValues,\n    });\n    const isFormValid = Object.values(errors).every((error) => !error?.message);\n\n    return (\n        <Form\n            aria-label=\"form\"\n            noValidate\n            autoComplete=\"off\"\n            onSubmit={handleSubmit(onSubmit)}\n        >\n            {location.pathname !== '/signin' && (\n                <Input<UserFormValues>\n                    type=\"text\"\n                    name=\"name\"\n                    register={register}\n                    clearErrors={clearErrors}\n                    errors={errors.name}\n                    placeholderText=\"name\"\n                    disabled={isLoadingAuth}\n                    pattern={{\n                        value: nameValidation,\n                        message: 'name should contain more than 3 characters',\n                    }}\n                    minLength={{\n                        value: 3,\n                        message: 'name should contain more than 3 characters',\n                    }}\n                    required=\"name cant be empty\"\n                />\n            )}\n            {formTextFields.slice(1).map((textfield) => (\n                <Input<UserFormValues>\n                    key={textfield.id}\n                    type={textfield.type}\n                    name={textfield.name}\n                    placeholderText={textfield.name}\n                    required={`${textfield.name} cant be empty`}\n                    pattern={{\n                        ...textfield.pattern,\n                        message:\n                            'password should contain only letters(eng), digits and ! @ # ~ &',\n                    }}\n                    minLength={{\n                        ...textfield.minLength,\n                        message: `should contain more than ${textfield.minLength} characters`,\n                    }}\n                    disabled={isLoadingAuth}\n                    errors={errors[textfield.name]}\n                    register={register}\n                    clearErrors={clearErrors}\n                />\n            ))}\n            <Button type=\"submit\" disabled={isLoadingAuth || !isFormValid}>\n                {keyPrefix}\n            </Button>\n        </Form>\n    );\n}\n\nexport default memo(AuthForm);\n","import styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { MdClose } from 'react-icons/md';\n\nimport { BackgroundColorProps, VariantsProps } from 'ts/interfaces';\n\nconst PopupWrapper = styled(motion.div).attrs<VariantsProps>(\n    ({ $variants }) => ({\n        initial: 'initial',\n        animate: 'animate',\n        exit: 'exit',\n        variants: $variants,\n    }),\n)<VariantsProps>`\n    position: fixed;\n    max-width: 450px;\n    width: 100%;\n    top: 0;\n    z-index: 8;\n    justify-self: center;\n`;\n\nconst Popup = styled.div<BackgroundColorProps>`\n    background-color: ${({ $backgroundColor, theme }) =>\n        $backgroundColor ?? theme.colors.backgroundBlue};\n    padding: 25px;\n    margin: 0 10px;\n    border-radius: 10px;\n    z-index: 3;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n`;\n\nconst PopupText = styled.p`\n    font-weight: ${({ theme }) => theme.fontsWeight.regular};\n    font-size: ${({ theme }) => theme.fontSizes.text};\n    color: ${({ theme }) => theme.colors.white};\n    text-align: center;\n`;\n\nconst ButtonWrapper = styled.div`\n    position: absolute;\n    top: 0;\n    right: 0;\n`;\n\nconst CloseIcon = styled(MdClose)``;\n\nconst ProgressBar = styled.div`\n    width: 95%;\n    height: 5px;\n    position: absolute;\n    top: 85%;\n    background-color: ${({ theme }) => theme.colors.transparent};\n`;\n\nconst Progress = styled(motion.div).attrs<VariantsProps>(({ $variants }) => ({\n    initial: 'initial',\n    animate: 'animate',\n    exit: 'exit',\n    variants: $variants,\n}))<VariantsProps>`\n    background-color: ${({ theme }) => theme.colors.backgroundWhite};\n    height: 5px;\n    opacity: 0.4;\n    border-radius: 0 0 5px 5px;\n`;\n\nexport {\n    PopupWrapper,\n    Popup,\n    ButtonWrapper,\n    PopupText,\n    CloseIcon,\n    ProgressBar,\n    Progress,\n};\n","import React, { memo, useEffect } from 'react';\nimport { AnimatePresence } from 'framer-motion';\nimport { ActionCreatorWithPayload } from '@reduxjs/toolkit/dist/createAction';\n\nimport Button from 'components/Button/Button';\n\nimport { notificationAnimation, progressBarAnimation } from 'utils/animations';\n\nimport { useAppDispatch } from 'hooks/useRedux';\n\nimport defaultTheme from 'styles/theme';\nimport {\n    ButtonWrapper,\n    CloseIcon,\n    Popup,\n    PopupText,\n    PopupWrapper,\n    Progress,\n    ProgressBar,\n} from './PopupNotification.style';\n\ninterface PopupNotificationProps {\n    text?: string;\n    isPopupShown: boolean;\n    setPopupShown: ActionCreatorWithPayload<boolean>;\n    backgroundColor?: string;\n}\n\nfunction PopupNotification({\n    isPopupShown,\n    setPopupShown,\n    text,\n    backgroundColor,\n}: PopupNotificationProps) {\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n        if (isPopupShown) {\n            setTimeout(() => {\n                dispatch(setPopupShown(false));\n            }, 3000);\n        }\n    }, [isPopupShown]);\n\n    return (\n        <AnimatePresence>\n            {isPopupShown && (\n                <PopupWrapper $variants={notificationAnimation}>\n                    <Popup $backgroundColor={backgroundColor}>\n                        <PopupText>{text}</PopupText>\n                        <ButtonWrapper>\n                            <Button\n                                type=\"button\"\n                                width=\"30px\"\n                                backgroundColor={\n                                    defaultTheme.colors.transparent\n                                }\n                                callback={() => dispatch(setPopupShown(false))}\n                            >\n                                <CloseIcon />\n                            </Button>\n                        </ButtonWrapper>\n                        <ProgressBar>\n                            <Progress $variants={progressBarAnimation} />\n                        </ProgressBar>\n                    </Popup>\n                </PopupWrapper>\n            )}\n        </AnimatePresence>\n    );\n}\n\nPopupNotification.defaultProps = {\n    backgroundColor: undefined,\n    text: '',\n};\n\nexport default memo(PopupNotification);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { AppDispatch, RootState } from 'redux/store';\n\nconst useAppDispatch = () => useDispatch<AppDispatch>();\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useAppDispatch, useAppSelector };\n","import { addFetchOptions } from 'utils/functions';\n\nimport { Endpoints, Methods } from 'ts/enums';\nimport { User, UserData } from 'ts/interfaces';\n\nimport { setUser } from 'redux/slices/userSlice';\nimport apiSlice from './apiSlice';\n\ntype UserDataOmitPassword = Omit<UserData, 'password'>;\n\ninterface UpdatedUserData {\n    id: string;\n    body: User;\n}\n\nconst userApiSlice = apiSlice.injectEndpoints({\n    endpoints: (builder) => ({\n        getAllUsers: builder.query<UserDataOmitPassword[], void>({\n            query: () => addFetchOptions(`${Endpoints.users}`, Methods.get),\n            providesTags: (result) =>\n                result\n                    ? [\n                          ...result.map(({ _id }) => ({\n                              type: 'User' as const,\n                              id: _id,\n                          })),\n                          'User',\n                      ]\n                    : ['User'],\n        }),\n\n        getUserById: builder.query<UserDataOmitPassword, string>({\n            query: (id: string) =>\n                addFetchOptions(`${Endpoints.users}${id}`, Methods.get),\n            transformErrorResponse: ({ status }): string =>\n                status === 403\n                    ? 'authorization.tokenInvalid'\n                    : 'authorization.error',\n        }),\n\n        deleteUserById: builder.mutation<UserDataOmitPassword, string>({\n            query: (id: string) =>\n                addFetchOptions(`${Endpoints.users}${id}`, Methods.delete),\n        }),\n\n        editUserById: builder.mutation<UserDataOmitPassword, UpdatedUserData>({\n            query: ({ id, body }) => ({\n                ...addFetchOptions(`${Endpoints.users}${id}`, Methods.put),\n                body,\n            }),\n            onQueryStarted: async ({ body }, { dispatch, queryFulfilled }) => {\n                try {\n                    await queryFulfilled;\n                    dispatch(setUser(body));\n                } catch (error) {\n                    if (error instanceof Error) {\n                        throw error;\n                    }\n                }\n            },\n            transformErrorResponse: ({ status }): string =>\n                status === 409 ? 'signUp.error' : 'authorization.error',\n            invalidatesTags: ['User'],\n        }),\n    }),\n});\n\nexport const {\n    useLazyGetUserByIdQuery,\n    useGetAllUsersQuery,\n    useGetUserByIdQuery,\n    useDeleteUserByIdMutation,\n    useEditUserByIdMutation,\n} = userApiSlice;\n","import { useCallback, useEffect } from 'react';\nimport { SubmitHandler } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useSignInMutation } from 'redux/api/authApiSlice';\nimport { useGetUserByIdQuery } from 'redux/api/userApiSlice';\nimport {\n    getAuthUser,\n    getErrorNotificationPopupOpen,\n    getLoggedIn,\n} from 'redux/selectors/userSelectors';\nimport {\n    setErrorNotificationPopupOpen,\n    setLoggedIn,\n    setUser,\n} from 'redux/slices/userSlice';\n\nimport { UserFormValues } from 'ts/interfaces';\n\nimport { useAppDispatch, useAppSelector } from './useRedux';\n\nconst useSignInUser = () => {\n    const authUser = useAppSelector(getAuthUser);\n    const isLoggedIn = useAppSelector(getLoggedIn);\n    const isErrorNotificationPopupOpen = useAppSelector(\n        getErrorNotificationPopupOpen,\n    );\n    const dispatch = useAppDispatch();\n    const navigate = useNavigate();\n    const [\n        signIn,\n        {\n            originalArgs: userData,\n            isLoading: isLoadingSignIn,\n            isError: isErrorSignIn,\n            error: signInErrorMessage,\n            reset,\n        },\n    ] = useSignInMutation();\n    const {\n        data: user,\n        isSuccess: isSuccessGetUser,\n        isFetching: isLoadingGetUser,\n    } = useGetUserByIdQuery(authUser?._id ?? '', { skip: !authUser?._id });\n\n    const onSubmit: SubmitHandler<UserFormValues> = useCallback(\n        async ({ name, ...formValues }) => {\n            await signIn(formValues);\n        },\n        [],\n    );\n\n    useEffect(() => {\n        if (user && userData && isSuccessGetUser) {\n            dispatch(\n                setUser({\n                    ...userData,\n                    name: user.name,\n                }),\n            );\n            dispatch(setLoggedIn(true));\n            reset();\n        }\n    }, [isSuccessGetUser]);\n\n    useEffect(() => {\n        if (isErrorSignIn) {\n            dispatch(setErrorNotificationPopupOpen(true));\n        }\n    }, [isErrorSignIn]);\n\n    useEffect(() => {\n        if (isLoggedIn) {\n            navigate('/projects');\n        }\n    }, [isLoggedIn]);\n\n    const isLoadingAuth = [isLoadingSignIn, isLoadingGetUser].some(\n        (loader) => loader,\n    );\n\n    return {\n        isErrorNotificationPopupOpen,\n        isLoadingAuth,\n        signInErrorMessage,\n        onSubmit,\n    };\n};\n\nexport default useSignInUser;\n","import React, { memo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport useSignInUser from 'hooks/useSignInUser';\n\nimport { setErrorNotificationPopupOpen } from 'redux/slices/userSlice';\n\nimport { backButtonAnimation } from 'utils/animations';\n\nimport AuthForm from 'components/AuthForm/AuthForm';\nimport Loader from 'components/Loader/Loader';\nimport Button from 'components/Button/Button';\nimport PopupNotification from 'components/PopupNotification/PopupNotification';\n\nimport {\n    FormDescriptionText,\n    FormDescriptionWrapper,\n    FormHeader,\n    FormWrapper,\n    LinkWrapper,\n    MainWrapper,\n    StyledLink,\n    StyledPrevIcon,\n    Title,\n} from 'styles/styles';\nimport defaultTheme from 'styles/theme';\n\nfunction SignInPage() {\n    const {\n        isErrorNotificationPopupOpen,\n        isLoadingAuth,\n        signInErrorMessage,\n        onSubmit,\n    } = useSignInUser();\n    const navigate = useNavigate();\n\n    return (\n        <MainWrapper>\n            <FormWrapper>\n                <FormHeader>\n                    <Button\n                        type=\"button\"\n                        width=\"30px\"\n                        animation={backButtonAnimation}\n                        backgroundColor={defaultTheme.colors.transparent}\n                        disabled={isLoadingAuth}\n                        callback={() => navigate(-1)}\n                    >\n                        <StyledPrevIcon $isDisabled={isLoadingAuth} />\n                    </Button>\n                </FormHeader>\n                <Title>Sign In</Title>\n                <AuthForm\n                    keyPrefix=\"signIn\"\n                    onSubmit={onSubmit}\n                    isLoadingAuth={isLoadingAuth}\n                />\n                <FormDescriptionWrapper>\n                    <FormDescriptionText>or</FormDescriptionText>\n                </FormDescriptionWrapper>\n                <LinkWrapper>\n                    <StyledLink to=\"/signup\">\n                        Still dont have an account? Sing Up\n                    </StyledLink>\n                </LinkWrapper>\n            </FormWrapper>\n            {isLoadingAuth && <Loader />}\n            {signInErrorMessage && (\n                <PopupNotification\n                    isPopupShown={isErrorNotificationPopupOpen}\n                    setPopupShown={setErrorNotificationPopupOpen}\n                    text=\"Incorrect login or password!\"\n                    backgroundColor={defaultTheme.colors.pink}\n                />\n            )}\n        </MainWrapper>\n    );\n}\n\nexport default memo(SignInPage);\n","import { addFetchOptions, parseJwt } from 'utils/functions';\n\nimport { Endpoints, Methods } from 'ts/enums';\nimport { AuthUser, User, UserData } from 'ts/interfaces';\n\nimport { setAuthUser, setUser } from 'redux/slices/userSlice';\nimport apiSlice from './apiSlice';\n\nconst authApiSlice = apiSlice.injectEndpoints({\n    endpoints: (builder) => ({\n        signUp: builder.mutation<User, User>({\n            query: (body: User) => ({\n                ...addFetchOptions(`${Endpoints.signUp}`, Methods.post),\n                body,\n                headers: {\n                    'Content-type': 'application/json',\n                    accept: 'application/json',\n                },\n            }),\n            onQueryStarted: async (arg, { dispatch, queryFulfilled }) => {\n                try {\n                    await queryFulfilled;\n                    dispatch(setUser(arg));\n                } catch (error) {\n                    if (error instanceof Error) {\n                        throw error;\n                    }\n                }\n            },\n            transformResponse: ({ _id, ...data }: UserData) => data,\n            transformErrorResponse: ({ status }): string =>\n                status === 409 ? 'signUp.error' : 'authorization.error',\n        }),\n\n        signIn: builder.mutation<AuthUser, User>({\n            query: (body: User) => ({\n                ...addFetchOptions(`${Endpoints.signIn}`, Methods.post),\n                headers: {\n                    'Content-type': 'application/json',\n                },\n                body,\n            }),\n            onQueryStarted: async (_, { dispatch, queryFulfilled }) => {\n                try {\n                    dispatch(setAuthUser((await queryFulfilled).data));\n                } catch (error) {\n                    if (error instanceof Error) {\n                        throw error;\n                    }\n                }\n            },\n            transformResponse: ({ token }: Pick<AuthUser, 'token'>) => ({\n                token,\n                ...parseJwt(token),\n            }),\n            transformErrorResponse: ({ status }): string =>\n                status === 401 ? 'signIn.error' : 'authorization.error',\n        }),\n    }),\n});\n\nexport const { useSignInMutation, useSignUpMutation } = authApiSlice;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { RootState } from 'redux/store';\n\nconst getBaseUserState = (state: RootState) => state.user;\n\nconst getUser = createSelector(getBaseUserState, (state) => state.user);\n\nconst getAuthUser = createSelector(getBaseUserState, (state) => state.authUser);\n\nconst getLoggedIn = createSelector(\n    getBaseUserState,\n    (state) => state.isLoggedIn,\n);\n\nconst getDeleteUserPopupOpen = createSelector(\n    getBaseUserState,\n    (state) => state.isDeleteUserPopupOpen,\n);\n\nconst getLogoutUserPopupOpen = createSelector(\n    getBaseUserState,\n    (state) => state.isLogoutUserPopupOpen,\n);\n\nconst getErrorNotificationPopupOpen = createSelector(\n    getBaseUserState,\n    (state) => state.isErrorNotificationPopupOpen,\n);\n\nconst getTokenInvalidPopupOpen = createSelector(\n    getBaseUserState,\n    (state) => state.isTokenInvalidPopupOpen,\n);\n\nexport {\n    getUser,\n    getAuthUser,\n    getLoggedIn,\n    getDeleteUserPopupOpen,\n    getLogoutUserPopupOpen,\n    getErrorNotificationPopupOpen,\n    getTokenInvalidPopupOpen,\n};\n","enum Endpoints {\n    signIn = 'auth/signin',\n    signUp = 'auth/signup',\n    users = 'users/',\n    boards = 'boards/',\n    boardsSet = 'boardsSet/',\n    columns = 'columns/',\n    columnsSet = 'columnsSet/',\n    tasks = 'tasks/',\n    tasksSet = 'tasksSet/',\n    file = 'file/',\n    points = 'points/',\n}\n\nenum Methods {\n    get = 'GET',\n    post = 'POST',\n    patch = 'PATCH',\n    put = 'PUT',\n    delete = 'DELETE',\n}\n\nexport { Endpoints, Methods };\n","interface ParsedJwt {\n    _id: string;\n    exp: number;\n}\n\nconst addFetchOptions = (\n    url: string,\n    method: string,\n    params: Record<string, number | string> = {},\n) => ({\n    url,\n    method,\n    params,\n});\n\nconst parseJwt = (token: string): ParsedJwt => {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        window\n            .atob(base64)\n            .split('')\n            .map(\n                (item) =>\n                    `%${`00${item.charCodeAt(0).toString(16)}`.slice(-2)}`,\n            )\n            .join(''),\n    );\n\n    const parsedToken = JSON.parse(jsonPayload);\n\n    return {\n        _id: parsedToken.id,\n        exp: parsedToken.exp,\n    };\n};\n\nexport { addFetchOptions, parseJwt };\n"],"names":["Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","InputWrapper","_templateObject2","StyledInput","input","_templateObject3","_ref","theme","colors","grey","_ref2","fonts","text","_ref3","fontSizes","_ref4","effects","transition","_ref5","primaryColor","_ref6","smallText","_ref7","PasswordButton","button","attrs","type","_templateObject4","_ref8","transparent","_ref9","_ref10","hoverOpacity","_ref11","Label","label","_templateObject5","_ref12","_ref13","_ref14","InputErrorText","span","_templateObject6","_ref15","smallNoteText","_ref16","red","Input","placeholderText","name","minLength","maxLength","required","pattern","errors","disabled","register","clearErrors","isPasswordShown","setPasswordShown","useState","_jsxs","children","_jsx","id","onChange","onClick","prev","AiOutlineEyeInvisible","AiOutlineEye","message","defaultProps","undefined","AuthForm","keyPrefix","isLoadingAuth","onSubmit","location","useLocation","user","useAppSelector","getUser","handleSubmit","formState","trigger","useForm","mode","reValidateMode","defaultValues","defaultUserFormValues","isFormValid","Object","values","every","error","Form","noValidate","autoComplete","pathname","value","nameValidation","formTextFields","slice","map","textfield","concat","Button","memo","PopupWrapper","motion","$variants","initial","animate","exit","variants","Popup","$backgroundColor","backgroundBlue","PopupText","p","fontsWeight","regular","white","ButtonWrapper","CloseIcon","MdClose","ProgressBar","Progress","_templateObject7","backgroundWhite","PopupNotification","isPopupShown","setPopupShown","backgroundColor","dispatch","useAppDispatch","useEffect","setTimeout","AnimatePresence","notificationAnimation","width","defaultTheme","callback","progressBarAnimation","useDispatch","useSelector","userApiSlice","apiSlice","injectEndpoints","endpoints","builder","getAllUsers","query","addFetchOptions","Endpoints","users","Methods","get","providesTags","result","_id","getUserById","transformErrorResponse","status","deleteUserById","mutation","delete","editUserById","body","put","onQueryStarted","async","queryFulfilled","setUser","Error","invalidatesTags","useLazyGetUserByIdQuery","useGetAllUsersQuery","useGetUserByIdQuery","useDeleteUserByIdMutation","useEditUserByIdMutation","useSignInUser","_authUser$_id","authUser","getAuthUser","isLoggedIn","getLoggedIn","isErrorNotificationPopupOpen","getErrorNotificationPopupOpen","navigate","useNavigate","signIn","originalArgs","userData","isLoading","isLoadingSignIn","isError","isErrorSignIn","signInErrorMessage","reset","useSignInMutation","data","isSuccess","isSuccessGetUser","isFetching","isLoadingGetUser","skip","useCallback","formValues","setLoggedIn","setErrorNotificationPopupOpen","some","loader","SignInPage","MainWrapper","FormWrapper","FormHeader","animation","backButtonAnimation","StyledPrevIcon","$isDisabled","Title","FormDescriptionWrapper","FormDescriptionText","LinkWrapper","StyledLink","to","Loader","pink","authApiSlice","signUp","post","headers","accept","arg","transformResponse","_","setAuthUser","token","parseJwt","useSignUpMutation","getBaseUserState","state","createSelector","isDeleteUserPopupOpen","isLogoutUserPopupOpen","isTokenInvalidPopupOpen","url","method","params","arguments","length","base64","split","replace","jsonPayload","decodeURIComponent","window","atob","item","charCodeAt","toString","join","parsedToken","JSON","parse","exp"],"sourceRoot":""}